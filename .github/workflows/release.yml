name: Release Extension(Manual)

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g. 1.0.0)'
        required: true
        type: string

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Setup Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
      
      - name: Validate version format
        run: |
          if [[ ! ${{ github.event.inputs.version }} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Invalid version format. Must be in format x.y.z"
            exit 1
          fi
      
      - name: Compare versions
        id: version_check
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version.replace(/-snapshot$/, '')")
          NEW_VERSION="${{ github.event.inputs.version }}"
          
          if ! dpkg --compare-versions "$NEW_VERSION" ge "$CURRENT_VERSION"; then
            echo "New version ($NEW_VERSION) must be greater than or equal to current version ($CURRENT_VERSION)"
            exit 1
          fi
      
      - name: Update package.json version
        run: |
          VERSION="${{ github.event.inputs.version }}"
          sed -i "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" package.json
          git add package.json
          git commit -m "chore: update version to $VERSION"
          git push
      
      - name: Create and push tag
        run: |
          VERSION="${{ github.event.inputs.version }}"
          TAG_NAME="v$VERSION"
          
          # Check if tag exists
          if ! git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            git tag "$TAG_NAME"
            git push origin "$TAG_NAME"
          else
            echo "Tag $TAG_NAME already exists, reusing it"
          fi
      
      - name: Verify version match
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          if [ "${{ github.event.inputs.version }}" != "$PKG_VERSION" ]; then
            echo "Version mismatch: Input version (${{ github.event.inputs.version }}) does not match package.json version ($PKG_VERSION)"
            exit 1
          fi
      
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Prepare build directory
        run: |
          rm -rf build
          mkdir -p build
        
      - name: Install vsce
        run: npm install -g @vscode/vsce
        
      - name: Package extension
        run: vsce package -o "build/thymelab-vscode-${{ github.event.inputs.version }}.vsix"

      - name: Get Changes
        id: get_changes
        run: |
          PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREV_TAG" ]; then
            CHANGES=$(git log --pretty=format:"- %s")
          else
            CHANGES=$(git log --pretty=format:"- %s" ${PREV_TAG}..HEAD)
          fi
          echo "changes<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: build/thymelab-vscode-*.vsix
          generate_release_notes: true
          name: ThymeLab VSCode v${{ github.event.inputs.version }}
          tag_name: v${{ github.event.inputs.version }}
          body: |
            ## ThymeLab VSCode Extension v${{ github.event.inputs.version }}

            ### Installation Instructions

            #### Method 1: Install from VSIX
            1. Download the `thymelab-vscode-${{ github.event.inputs.version }}.vsix` file from this release
            2. Open VS Code
            3. Go to Extensions view (Ctrl+Shift+X)
            4. Click on the '...' menu (Views and More Actions)
            5. Select 'Install from VSIX...'
            6. Choose the downloaded VSIX file

            #### Method 2: Command Line Installation
            ```bash
            code --install-extension thymelab-vscode-${{ github.event.inputs.version }}.vsix
            ```

            ### What's Changed
            ${{ steps.get_changes.outputs.changes }}
      
      - name: Update to next snapshot version
        run: |
          CURRENT_VERSION="${{ github.event.inputs.version }}"
          # Increment the last number and add -snapshot
          NEW_VERSION=$(echo $CURRENT_VERSION | awk -F. '{$NF = $NF + 1;} 1' OFS=.)-snapshot
          
          sed -i "s/\"version\": \".*\"/\"version\": \"$NEW_VERSION\"/" package.json
          git add package.json
          git commit -m "chore: update version to $NEW_VERSION"
          git push 
